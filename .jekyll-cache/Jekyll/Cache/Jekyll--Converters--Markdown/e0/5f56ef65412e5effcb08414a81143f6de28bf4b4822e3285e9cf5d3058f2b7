I"y<p>Node.js를 사용하다 보면 module의 사용은 필수적이다. 모듈 단위로 파일이 작성되고 독자적인 scope가 생성되기 때문에 A 모듈에서 B 모듈을 사용하려면 보내고 받는 작용이 필요하다.</p>

<p>Node.js는 CommonJS를 따르기 때문에 exports 객체를 이용하여 모듈을 정의하고, require 함수를 이용하여 사용한다.</p>

<p>자료를 찾아보다 보면 어떤 자료는 모듈을 정의할때 module.exports를 사용하고, 어떤 자료는 exports를 사용하여 다소 혼란스러울 수 있다. 그렇다면 module.exports와 exports는 어떻게 다른 것일까?</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*v31Z0piKOjNwmuzCoXreGw.png" alt="module.exports vs exports" title="module.exports vs exports" /></p>

<p>앞서 말했듯이, Common JS 에서는 export 객체를 이용하여 모듈을 정의한다. 그렇다. exports는 객체이다. exports와 module.exports의 관계를 살펴보면</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">exports</span><span class="p">:</span> <span class="p">{}</span>
<span class="p">};</span>
<span class="kd">var</span> <span class="nx">exports</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</code></pre></div></div>

<p>module.exports는 어떠한 객체를 바라보고 있고, exports는 그런 module.exports를 바라보고 있다. 즉, 둘 다 같은 객체를 바라보고 있는 것. (바라본다고 표현한 이유는 JS에서 객체/배열은 값의 할당이 아니라, 참조로 동작하기 때문!)</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*-IbnOSFunupyGW-KpNwSxg.png" alt="module.exports vs exports" title="module.exports vs exports" /></p>

<p>예제로 확인해보자.</p>

<p>아래와 같이 lib/my-module.js라는 파일에서, increment 함수를 정의하고, 아래와 같이 실행했을 때, result는 무엇일까?</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">mod1</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./lib/my-module.js</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">mod2</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./lib/my-module.js</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">mod1</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">mod2</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span>

<span class="c1">// in lib/my-module.js:</span>
<span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">increment</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">counter</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">counter</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>mod1, mod2는 require 함수를 사용하여 각각 increment 함수를 사용하지만, 결국은 같은 객체를 바라보고 있다. 따라서 함수가 두 번 실행되어 result는 2가 된다. 👀</p>
:ET