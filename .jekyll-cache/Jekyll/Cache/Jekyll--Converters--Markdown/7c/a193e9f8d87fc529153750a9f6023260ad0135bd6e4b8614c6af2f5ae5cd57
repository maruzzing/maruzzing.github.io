I"?<p>만들어 보고 싶은 서비스가 있는데 검색엔진 최적화가 중요해 Next.js를 사용해 보기로 했다. Next.js는 React용 SSR 프레임워크 인데, <a href="https://github.com/vercel/next.js/tree/canary/examples">공식 문서</a>에서 다양한 예제를 참고할 수 있다. 그 중 <a href="https://github.com/vercel/next.js/tree/canary/examples/with-typescript">with-typescript</a>를 이용해 기본 세팅을 해보았다.</p>

<h1 id="프로젝트-생성하기">프로젝트 생성하기</h1>

<p>아래 명령어로 타입스크립트가 적용된 next 프로젝트를 생성한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npx create-next-app <span class="nt">--example</span> with-typescript <span class="o">[</span>프로젝트 이름]
</code></pre></div></div>

<p><code class="highlighter-rouge">npm install</code> 명령어를 통해 패키지를 설치하고 <code class="highlighter-rouge">npm run dev</code> 명령어로 개발 서버를 실행시키면, 아래와 같은 웹페이지가 실행된다.</p>

<div style="display: flex; justify-content: center">
  <img src="/images/nextjs-start.png" alt="nextjs-start" width="500em" />
</div>

<h2 id="폴더구조">폴더구조</h2>

<div style="display: flex; justify-content: center">
  <img src="/images/nextjs-structure.png" alt="nextjs-structure" width="350em" />
</div>

<h3 id="pages">pages</h3>

<p>next.js의 장점 중 하나인 코드스플리팅을 위해 모든 페이지들은 루트 디렉토리 내 pages 폴더에 정의되어야 한다.</p>

<p><code class="highlighter-rouge">/</code>로 진입 시  <code class="highlighter-rouge">/pages/index.tsx</code>가 실행 될 것이며, <code class="highlighter-rouge">/pages/about.tsx</code>는 <code class="highlighter-rouge">/about</code>으로 라우팅 된다.</p>

<p>기본 예제에서도 알 수 있듯이 <code class="highlighter-rouge">/pages/user/index.tsx</code>는 <code class="highlighter-rouge">/user</code>로 라우팅 되며, <code class="highlighter-rouge">/pages/user/[i].tsx</code>는 <code class="highlighter-rouge">/user/i</code>로 동적 라우팅을 구현할 수 있다.</p>

<h3 id="public">public</h3>

<p>이미지와 같은 static 파일들은 루트 디렉토리 내 public 폴더에서 꺼내 쓸 수 있다. 위의 이미지 처럼 public 폴더 내 my-image.png 파일은 아래와 같이 쓸 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">/my-image.png</span><span class="dl">"</span> <span class="nx">alt</span><span class="o">=</span><span class="dl">"</span><span class="s2">my image</span><span class="dl">"</span> <span class="o">/&gt;</span>
</code></pre></div></div>

<h3 id="src">src</h3>

<p>기본 예제에서는 루트 디렉토리 내 components, utils 등이 있는데 편의 상 pages와 public 폴더를 제외한 다른 코드들은 src 폴더에 넣을 예정이다. src 폴더 내 styles 폴더는 잠시 후 Styles-Components를 적용하면서 다룰 예정이다.</p>

<h3 id="barbelrc--nextconfigjs">.barbelrc &amp; next.config.js</h3>

<p>바벨 플러그인 설정과 웹팩 설정을 구성하는 파일이다.</p>

<p><br /></p>

<h1 id="styled-components-적용하기">Styled-Components 적용하기</h1>

<p>다시 본론으로 돌아와 Styled-Components를 적용해 보자.</p>

<h2 id="모듈-설치">모듈 설치</h2>

<p>먼저 <a href="https://styled-components.com/">styled-components</a>와 브라우저마다 다른 스타일링을 최소화 하기 위해 <a href="https://github.com/sergeysova/styled-normalize">styled-normalize</a>도 설치해 준다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm i styled-components styled-normalize
<span class="nv">$ </span>npm i <span class="nt">-D</span> @types/styled-components
</code></pre></div></div>

<h2 id="전역-스타일과-커스텀-테마-정의">전역 스타일과 커스텀 테마 정의</h2>

<p>아까 만들어 두었던 /src/styles 폴더 내 아래와 같이 세 가지 파일을 만들 예정이다.</p>

<div style="display: flex; justify-content: center">
  <img src="/images/nextjs-styles.png" alt="nextjs-styles" width="600em" />
</div>

<h3 id="global-stylests">global-styles.ts</h3>

<p>프로젝트 전역에 적용할 스타일의 정의한다. 계산하기 쉽게 10px을 1em으로 쓰기위해 <code class="highlighter-rouge">font-size: 62.5%</code>로 정의했고 전역에 사용할 서체 등도 여기에서 정의해 주면 된다. 또한 이전에 설치했던 <code class="highlighter-rouge">styled-normalize</code>도 아래와 같이 적용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">createGlobalStyle</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">styled-components</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">normalize</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">styled-normalize</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">GlobalStyle</span> <span class="o">=</span> <span class="nx">createGlobalStyle</span><span class="s2">`
  </span><span class="p">${</span><span class="nx">normalize</span><span class="p">}</span><span class="s2">
  html {
    box-sizing: border-box;
    font-size: 62.5%;
    min-width: 320px;
  }
  *,
  *::before,
  *::after {
    box-sizing: inherit;
  }
  * { font-family: 'Spoqa Han Sans', 'Spoqa Han Sans JP', 'Sans-serif';}
  a { cursor: pointer; text-decoration: none; }
`</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="styleddts">styled.d.ts</h3>

<p>아래와 같이 커스텀 테마의 타입을 정의해 준다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">styled-components</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">declare</span> <span class="nx">module</span> <span class="dl">'</span><span class="s1">styled-components</span><span class="dl">'</span> <span class="p">{</span>
  <span class="k">export</span> <span class="kr">interface</span> <span class="nx">DefaultTheme</span> <span class="p">{</span>
    <span class="nl">breakPoint</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

    <span class="nl">colors</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">black</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
      <span class="nl">yellow</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
      <span class="nl">orange</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
      <span class="nl">gray</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
      <span class="nl">gray_background</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="p">};</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="themets">theme.ts</h3>

<p>위에서 정의 해 준 theme 타입에 맞게 theme을 정의해 준다.</p>

<p>import {DefaultTheme} from ‘styled-components’;</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">theme</span><span class="p">:</span> <span class="nx">DefaultTheme</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">breakPoint</span><span class="p">:</span> <span class="dl">'</span><span class="s1">769px</span><span class="dl">'</span><span class="p">,</span>

  <span class="na">colors</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">black</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#1e1f1d</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">yellow</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#edb83c</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">orange</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#eb7952</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">gray</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#6e6e6e</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">gray_background</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#f5f5f5</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="전역-스타일과-커스텀-테마-적용">전역 스타일과 커스텀 테마 적용</h2>

<p>이제 본격적으로 Styled-Components를 사용할 차례이다. Next.js에서 페이지가 실행될 때 가장 먼저 <code class="highlighter-rouge">App</code> 컴포넌트가 실행되는데, 따로 커스터마이징 하지 않으면 Next.js에 내장된 로직이 실행된다. 모든 페이지에 적용 될 스타일을 적용해 주기 위해 <code class="highlighter-rouge">App</code> 컴토넌트를 커스터마이징 해보겠다. 이에 대한 자세한 내용은 <a href="https://nextjs.org/docs/advanced-features/custom-app">공식 문서</a>를 참고!</p>

<p>먼저 pages 폴더 내 <code class="highlighter-rouge">_app.tsx</code> 파일을 생성하고 컴포넌트를 전역 스타일과 테마로 감싸준다. 이제 모든 페이지와 컴포넌트에서 styled-components와 커스텀 테마를 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">type</span> <span class="p">{</span><span class="nx">AppProps</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/app</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">ThemeProvider</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">styled-components</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Head</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/head</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span><span class="nx">GlobalStyle</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../src/styles/global-styles</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">theme</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../src/styles/theme</span><span class="dl">'</span><span class="p">;</span>


<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">App</span><span class="p">({</span><span class="nx">Component</span><span class="p">,</span> <span class="nx">pageProps</span><span class="p">}:</span> <span class="nx">AppProps</span><span class="p">)</span> <span class="p">{</span>

  <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">ThemeProvider</span> <span class="nx">theme</span><span class="o">=</span><span class="p">{</span><span class="nx">theme</span><span class="p">}</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">GlobalStyle</span> <span class="o">/&gt;</span>
          <span class="o">&lt;</span><span class="nx">Component</span> <span class="p">{...</span><span class="nx">pageProps</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/ThemeProvider</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>아래는 styled-components를 사용하여 커스텀 테마를 적용하고, 미디어 쿼리를 적용하는 예시이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ListContainer</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 50%;
  background-color: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">colors</span><span class="p">.</span><span class="nx">gray_background</span><span class="p">}</span><span class="s2">
  @media (max-width: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">breakPoint</span><span class="p">}</span><span class="s2">) {
    width: 100%;
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="바벨-플로그인-추가">바벨 플로그인 추가</h2>

<p>여기까지 하고나면 스타일링이 적용되기 전에 렌더가 되는 문제가 발생하게 되는데, 이를 해결해 주기 위해 바벨 플로그인을 추가한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm i <span class="nt">-D</span> babel-plugin-styled-components
</code></pre></div></div>

<p>루트 디렉토리에 <code class="highlighter-rouge">.babelrc</code> 파일을 생성하고 아래와 같이 작성해 준다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"presets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"next/babel"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">[</span><span class="w">
        </span><span class="s2">"styled-components"</span><span class="p">,</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"ssr"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
          </span><span class="nl">"displayName"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
          </span><span class="nl">"preprocess"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
:ET