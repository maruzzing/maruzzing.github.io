I"}<h3 id="문제">문제</h3>

<p>Given a single input string, write a function that produces all possible anagrams of a string and outputs them as an array. At first, don’t worry about repeated strings. What time complexity is your solution?</p>

<p>Extra credit: Deduplicate your return array without using uniq().</p>

<p>example usage:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">anagrams</span> <span class="o">=</span> <span class="nx">allAnagrams</span><span class="p">(</span><span class="dl">"</span><span class="s2">abc</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">anagrams</span><span class="p">);</span> <span class="c1">// [ 'abc', 'acb', 'bac', 'bca', 'cab', 'cba' ]</span>
</code></pre></div></div>

<h3 id="풀이">풀이</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">allAnagrams</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">stringObj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">string</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">stringObj</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">anagramsObj</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="kd">const</span> <span class="nx">makeAnagrams</span> <span class="o">=</span> <span class="p">(</span><span class="nx">word</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">word</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="nx">string</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">anagramsObj</span><span class="p">[</span><span class="nx">word</span><span class="p">])</span> <span class="p">{</span>
        <span class="nx">anagramsObj</span><span class="p">[</span><span class="nx">word</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">string</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">newWord</span> <span class="o">=</span> <span class="nx">word</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">obj</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
        <span class="nx">newWord</span> <span class="o">+=</span> <span class="nx">string</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
        <span class="nx">obj</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">!</span><span class="nx">obj</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
        <span class="nx">makeAnagrams</span><span class="p">(</span><span class="nx">newWord</span><span class="p">,</span> <span class="nx">obj</span><span class="p">);</span>
        <span class="nx">obj</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">!</span><span class="nx">obj</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">};</span>
  <span class="nx">makeAnagrams</span><span class="p">(</span><span class="dl">""</span><span class="p">,</span> <span class="nx">stringObj</span><span class="p">);</span>
  <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">anagramsObj</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>
:ET