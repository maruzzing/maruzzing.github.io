I"(<p>자바스크립트의 정말 헷갈리는 개념이자 정말 중요한 개념 중 하나인 <strong>This 키워드!</strong></p>

<p>한마디로 This를 정의하자면,</p>

<p><strong>This는 호출 시점에서 실행함수가 가르키는 객체이다. 다른말로는 실행함수의 호출자. 라고 할 수 있을 것 같다.</strong></p>

<p>자바스크립트에는 4가지 Pattern이 있는데, 일반함수 실행, 메소드 실행, 생성자 (new) 실행, 명시적 지정(call, apply, bind ) 이 그것이다.</p>

<h2 id="일반함수-실행">일반함수 실행</h2>

<p>함수실행에서의 This는 전역객체(window)이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
<span class="c1">// window -&gt; add()에서 this는 전역객체(window)</span>
<span class="c1">// 7</span>
</code></pre></div></div>

<p>그렇다면, 아래 코드를 실행한 후 result 값은 무엇이 될까?</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
<span class="p">};</span>
<span class="nx">result</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// 20</span>
</code></pre></div></div>

<p>add() 함수 내에서 새로 선언된 x=20; 때문에 답이 30이라고 생각할 수 있지만, 실행시점에서 this는 window이다. 또한, 자바스크립트에서 변수는 함수 스코프를 가지므로, 함수 실행시점에서 x는 전역에서 선언된 10이되고, result = 20이다. (add 함수 내에 console.log(x); 를 하면, 20이 찍힐 것이다.)</p>

<h2 id="메소드-실행">메소드 실행</h2>

<p>메소드란, 객체의 속성으로 정의된 함수이다. 이 경우, This는 해당 메소드를 소유하고 있는 객체가 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">foo</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// obj</span>
</code></pre></div></div>

<h2 id="생성자new-실행">생성자(new) 실행</h2>

<p>생성자는 new 로 객체를 만드는 것이고, 이 때, this는 new를 통해 만들어 진 새로운 변수이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Human</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">hobby</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">hobby</span> <span class="o">=</span> <span class="nx">hobby</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">newThis</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">aHuman</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Human</span><span class="p">(</span><span class="dl">"</span><span class="s2">Steve</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Swimming</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//new로 Human 객체 생성</span>
<span class="nx">aHuman</span><span class="p">.</span><span class="nx">newThis</span><span class="p">();</span> <span class="c1">// Human</span>
</code></pre></div></div>

<h2 id="명시적-지정">명시적 지정</h2>

<p>.call()이나, .apply(), .bind()를 이용하여 This를 명시적으로 지정해줄 수 있다. .bind()는 이후 새 포스팅을 통해 소개하도록 하고, 이번엔 .call()과 .apply()만 다루고자 한다. .call()과 .apply()의 역할은 동일하나, .apply()는 배열/유사배열을 인자로 받는다는 것이 다르다.</p>

<p>func.call(thisArg, arg1, arg2…) / func.apply(thisArg, [arg1, arg2…])</p>

<p>여기서 thisArg 자리에 명시적으로 지정해줄 This 객체를 적으면 된다. 이 때의 This는 명시적으로 지정해준 This이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">foo</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
<span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">foo</span><span class="p">:</span> <span class="nx">obj1</span><span class="p">.</span><span class="nx">foo</span>
<span class="p">};</span>
<span class="nx">obj1</span><span class="p">.</span><span class="nx">foo</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">obj2</span><span class="p">);</span> <span class="c1">// obj2</span>
</code></pre></div></div>

<p>obj1의 foo 함수를 실행하지만, call을 이용하여, this가 obj2 임을 지정해 주었기 때문에 this는 obj2이다.</p>

<p>코딩을 하다보면 This의 늪에 빠지게 되어, 범인은 또 This야!! 라고 울컥울컥 하기도 하지만, 자바스크립트의 유연성을 대표하는 매력적인 키워드 인것 같다. 😛</p>
:ET