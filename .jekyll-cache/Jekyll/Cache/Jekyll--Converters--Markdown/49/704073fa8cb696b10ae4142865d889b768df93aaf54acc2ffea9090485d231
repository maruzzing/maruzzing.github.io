I")7<p>이전 <a href="/study/nodejs/multer-사용하여-이미지-업로드-구현하기/">multer 사용하여 이미지 업로드 구현하기</a> 포스팅 에서는 multer 모듈을 사용하여 클라이언트 쪽에서 보내온 이미지 파일을 서버의 특정 폴더 내에 저장하고, 그 저장 경로를 db에 저장하는 방법을 알아보았다. 이제 슬슬 배포를 준비하고 있기 때문에 이미지를 서버에 저장하는 것이 아니라 <strong>AWS S3</strong>에 저장하도록 코드를 수정해보려 한다.</p>

<h2 id="aws-s3-버킷-만들기">AWS S3 버킷 만들기</h2>

<p>가장 먼저 해야할 일은 AWS S3 버킷을 만들고, 버킷에 접근하여 수정 작업을 진행할 수 있도록 자격증명을 얻어야 한다.</p>

<h3 id="s3-버킷-만들기">S3 버킷 만들기</h3>

<p>S3 버킷을 만드는데 주의할 점은, 아래 사진과 같이 ‘새 ACL을 통해 부여된 버킷 및 객체에 대한 퍼블릭 액세스 차단’과 ‘임의의 ACL을 통해 부여된 버킷 및 객체에 대한 퍼블릭 액세스 차단’을 풀어주어야 한다.
<img src="/images/s3_bucket_setting.png" alt="S3 bucket setting" title="S3 bucket setting" /></p>

<p>또한, CORS 구성도 아래와 같이 편집해 주어야 한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;CORSConfiguration</span> <span class="na">xmlns=</span><span class="s">"http://s3.amazonaws.com/doc/2006-03-01/"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;CORSRule&gt;</span>
    <span class="nt">&lt;AllowedOrigin&gt;</span>*<span class="nt">&lt;/AllowedOrigin&gt;</span>
    <span class="nt">&lt;AllowedMethod&gt;</span>POST<span class="nt">&lt;/AllowedMethod&gt;</span>
    <span class="nt">&lt;AllowedMethod&gt;</span>GET<span class="nt">&lt;/AllowedMethod&gt;</span>
    <span class="nt">&lt;AllowedMethod&gt;</span>PUT<span class="nt">&lt;/AllowedMethod&gt;</span>
    <span class="nt">&lt;AllowedMethod&gt;</span>DELETE<span class="nt">&lt;/AllowedMethod&gt;</span>
    <span class="nt">&lt;AllowedMethod&gt;</span>HEAD<span class="nt">&lt;/AllowedMethod&gt;</span>
    <span class="nt">&lt;AllowedHeader&gt;</span>*<span class="nt">&lt;/AllowedHeader&gt;</span>
  <span class="nt">&lt;/CORSRule&gt;</span>
<span class="nt">&lt;/CORSConfiguration&gt;</span>
</code></pre></div></div>

<h3 id="cognito-자격증명-받기">Cognito 자격증명 받기</h3>

<p>버킷 생성이 끝났으면, <a href="https://ap-northeast-2.console.aws.amazon.com/cognito/home?region=ap-northeast-2">Amazon Cognito 콘솔</a>에서 자격증명을 부여받아야 한다. ‘새 자격증명 풀’을 만드는데, ‘인증되지 않은 자격 증명에 대한 액세스 활성화’를 체크한 상태에서 풀을 생성해야 한다.
<img src="/images/aws_cognito_pool.png" alt="AWS Cognito" title="AWS Cognito" /></p>

<p>또한, 다음 페이지에서 세부정보 숨기기를 펼치고 unauthenticated identities의 정책을 다음과 같이 편집해 준다. 여기서 BUCKET_NAME은 사용하고자 하는 S3 버킷 이름을 입력하면 된다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"s3:*"</span><span class="p">],</span><span class="w">
      </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"arn:aws:s3:::BUCKET_NAME/*"</span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><br />
여기까지 하면, 자격증명이 생성되고, 해당 자격증명의 대쉬보드 &gt; 샘플코드에서 플랫폼에 따른 자격증명코드를 확인할 수 있다.
<img src="/images/aws_cognito_code.png" alt="AWS Cognito Code" title="AWS Cognito Code" /></p>

<h2 id="multer-s3와-aws-sdk를-이용한-이미지-업로더-구현하기">multer-s3와 aws-sdk를 이용한 이미지 업로더 구현하기</h2>

<p>먼저 필요한 모듈을 설치한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add multer-s3 aws-sdk
</code></pre></div></div>

<h3 id="appjs에서-aws-연결하기">app.js에서 AWS 연결하기</h3>

<p>이전 단계에서 부여받은 자격증명코드를 이용해 AWS에 연결한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">AWS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">aws-sdk</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">region</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span><span class="p">.</span><span class="nx">AWS_CONFIG_REGION</span><span class="p">;</span>
<span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">credentials</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">CognitoIdentityCredentials</span><span class="p">({</span>
  <span class="na">IdentityPoolId</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span><span class="p">.</span><span class="nx">AWS_CONFIG_IDENTITYPOOLID</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="upload-모듈-만들기">upload 모듈 만들기</h3>

<p>upload 모듈을 만드는 방법은 <a href="https://github.com/badunk/multer-s3#readme">multer-s3 공식문서</a>를 참고하면 된다.
<code class="highlighter-rouge">s3 = new aws.S3()</code>를 통해 s3를 정의해 주고, 사용할 BUCKET_NAME을 입력한다. <code class="highlighter-rouge">key</code>의 콜백함수를 이용하여 파일명을 설정해 준다. 여기선 원래의 파일명을 사용하기로 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">multer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">multer</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">multerS3</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">multer-s3</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">aws</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">aws-sdk</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aws</span><span class="p">.</span><span class="nx">S3</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">upload</span> <span class="o">=</span> <span class="nx">multer</span><span class="p">({</span>
  <span class="na">storage</span><span class="p">:</span> <span class="nx">multerS3</span><span class="p">({</span>
    <span class="na">s3</span><span class="p">:</span> <span class="nx">s3</span><span class="p">,</span>
    <span class="na">bucket</span><span class="p">:</span> <span class="nx">BUCKET_NAME</span><span class="p">,</span> <span class="c1">// 버킷 이름</span>
    <span class="na">contentType</span><span class="p">:</span> <span class="nx">multerS3</span><span class="p">.</span><span class="nx">AUTO_CONTENT_TYPE</span><span class="p">,</span> <span class="c1">// 자동을 콘텐츠 타입 세팅</span>
    <span class="na">acl</span><span class="p">:</span> <span class="dl">"</span><span class="s2">public-read</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 클라이언트에서 자유롭게 가용하기 위함</span>
    <span class="na">key</span><span class="p">:</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
      <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">file</span><span class="p">.</span><span class="nx">originalname</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="na">limits</span><span class="p">:</span> <span class="p">{</span> <span class="na">fileSize</span><span class="p">:</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span> <span class="p">}</span> <span class="c1">// 용량 제한</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="upload-라우터-작성하기">upload 라우터 작성하기</h3>

<p>‘uploadedImages’라는 이름으로 최대 5개의 파일을 보내올 것이기 때문에 아래와 같이 라우터를 작성한다. 하나의 파일만 업로드 한다면, <code class="highlighter-rouge">upload.single("uploadedImage")</code>을 사용한다. S3에 업로드가 되고 나면 <code class="highlighter-rouge">req.file</code> 혹은 <code class="highlighter-rouge">req.files</code>에 파일정보가 저장되며, <code class="highlighter-rouge">req.file.location</code>에서 url을 확인할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/upload</span><span class="dl">"</span><span class="p">,</span> <span class="nx">upload</span><span class="p">.</span><span class="nx">array</span><span class="p">(</span><span class="dl">"</span><span class="s2">uploadedImages</span><span class="dl">"</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">file ::: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">files</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">req</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">image url ::: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">location</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">success</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>
:ET