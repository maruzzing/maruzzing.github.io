I"û<h3 id="Î¨∏Ï†ú">Î¨∏Ï†ú</h3>

<p>Given a roman numeral as input, write a function that converts the roman numeral to a number and outputs it.</p>

<p>Ex:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">translateRomanNumeral</span><span class="p">(</span><span class="dl">"</span><span class="s2">LX</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 60</span>
</code></pre></div></div>

<p>When a smaller numeral appears before a larger one, it becomes a subtractive operation. You can assume only one smaller numeral may appear in front of larger one.</p>

<p>Ex:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">translateRomanNumeral</span><span class="p">(</span><span class="dl">"</span><span class="s2">IV</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 4</span>
</code></pre></div></div>

<p>You should return <code class="highlighter-rouge">null</code> on invalid input.</p>

<h3 id="ÌíÄÏù¥">ÌíÄÏù¥</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">DIGIT_VALUES</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">I</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="na">V</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="na">X</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="na">L</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
  <span class="na">C</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
  <span class="na">D</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
  <span class="na">M</span><span class="p">:</span> <span class="mi">1000</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">translateRomanNumeral</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">romanNumeral</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">romanNumeral</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">let</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">splited</span> <span class="o">=</span> <span class="nx">romanNumeral</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">""</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">splited</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span>
      <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">splited</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>
      <span class="nx">DIGIT_VALUES</span><span class="p">[</span><span class="nx">splited</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">&lt;</span> <span class="nx">DIGIT_VALUES</span><span class="p">[</span><span class="nx">splited</span><span class="p">[</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]]</span>
    <span class="p">)</span> <span class="p">{</span>
      <span class="nx">number</span> <span class="o">-=</span> <span class="nx">DIGIT_VALUES</span><span class="p">[</span><span class="nx">splited</span><span class="p">[</span><span class="nx">i</span><span class="p">]];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">number</span> <span class="o">+=</span> <span class="nx">DIGIT_VALUES</span><span class="p">[</span><span class="nx">splited</span><span class="p">[</span><span class="nx">i</span><span class="p">]];</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>
:ET