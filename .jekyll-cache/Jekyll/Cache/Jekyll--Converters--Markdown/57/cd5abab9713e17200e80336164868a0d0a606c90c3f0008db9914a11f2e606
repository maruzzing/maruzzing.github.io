I"t&<h3 id="문제">문제</h3>

<p>Implement a linked list using the pseudoclassical instantiation pattern.
Your linked list should have methods called <code class="highlighter-rouge">addToTail</code>, <code class="highlighter-rouge">removeHead</code>, and <code class="highlighter-rouge">contains</code>.</p>

<p>EXAMPLE USAGE:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">tail</span><span class="p">;</span> <span class="c1">//yields 'null'</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">addToTail</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">addToTail</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span> <span class="c1">//yields '4';</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">//yields 'true';</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span> <span class="c1">//yields 'false';</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">removeHead</span><span class="p">();</span> <span class="c1">//yields '4'</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">tail</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span> <span class="c1">//yields '5';</span>
</code></pre></div></div>

<h3 id="풀이">풀이</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">LinkedList</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">storage</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">tail</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">LinkedList</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addToTail</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">newTail</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">makeNode</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">addTail</span> <span class="o">=</span> <span class="nx">node</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">addTail</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">next</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">node</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">newTail</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tail</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">addTail</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">tail</span> <span class="o">=</span> <span class="nx">newTail</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">storage</span> <span class="o">=</span> <span class="nx">newTail</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">newTail</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">tail</span> <span class="o">=</span> <span class="nx">newTail</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">LinkedList</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">removeHead</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">sotrage</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">tail</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">newHead</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">newHead</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">storage</span> <span class="o">=</span> <span class="nx">newHead</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">LinkedList</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">contains</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">isContain</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">retrieve</span> <span class="o">=</span> <span class="nx">node</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">isContain</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">node</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">retrieve</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">next</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>
  <span class="nx">retrieve</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">isContain</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">LinkedList</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">makeNode</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">node</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="nx">value</span><span class="p">,</span>
    <span class="na">next</span><span class="p">:</span> <span class="kc">null</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">node</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>
:ET