I"<p>TypeScript 공부를 시작했으니 이번엔 React Native에 TypeScript를 적용해보자. 먼저 프로젝트 만들기! <a href="https://facebook.github.io/react-native/blog/2018/05/07/using-typescript-with-react-native">공식문서</a>에 너무 잘 나와있어 따라하면 무리없이 시작할 수 있다.</p>

<h3 id="react-native-프로젝트-시작하기">react native 프로젝트 시작하기</h3>

<p>먼저, <code class="highlighter-rouge">react-native init</code>을 사용해 react native 프로젝트를 생성한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>react-native init MyAwesomeProject
<span class="nb">cd </span>MyAwesomeProject
</code></pre></div></div>

<h3 id="typescript-관련-dependencies-설치">typescript 관련 dependencies 설치</h3>

<p>이제 typescript를 적용하는데 필요한 dependencies를 설치한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">--dev</span> typescript
yarn add <span class="nt">--dev</span> react-native-typescript-transformer
yarn tsc <span class="nt">--init</span> <span class="nt">--pretty</span> <span class="nt">--jsx</span> react-native
<span class="nb">touch </span>rn-cli.config.js
yarn add <span class="nt">--dev</span> @types/react @types/react-native
</code></pre></div></div>

<p>바로 위에서 <code class="highlighter-rouge">touch</code>로 생성한 <code class="highlighter-rouge">rn-cli.config.js</code> 파일에 다음 내용을 추가한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">getTransformModulePath</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">require</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">react-native-typescript-transformer</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="nx">getSourceExts</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="dl">"</span><span class="s2">ts</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">tsx</span><span class="dl">"</span><span class="p">];</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>그리고 <code class="highlighter-rouge">tsconfig.json</code> 파일에 컴파일 옵션들이 정의되어 있는데, es5로 설정되어 있다. 만약 es6 문법을 쓸 예정이라면, 아래 내용을 바꿔주면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
    <span class="dl">"</span><span class="s2">target</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">es6</span><span class="dl">"</span> <span class="c1">// 'es5"</span>
<span class="p">...</span>
</code></pre></div></div>

<h3 id="파일명-바꾸기">파일명 바꾸기</h3>

<p>App.js를 App.tsx로 변경하고, 앞으로 컴포넌트 파일들은 <code class="highlighter-rouge">.tsx</code> 확장자로 생성한다.
주의 할 점은 index.js 파일은 변경하지 않고 그대로 두어야 한다.</p>

<p>끄읕!</p>
:ET