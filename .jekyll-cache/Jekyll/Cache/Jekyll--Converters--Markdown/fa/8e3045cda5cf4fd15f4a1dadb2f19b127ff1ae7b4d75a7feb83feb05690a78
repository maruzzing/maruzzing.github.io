I"<h3 id="문제">문제</h3>

<p>Write Compose and Pipe functions.</p>

<p>Step 1: Implement the function Compose:</p>

<p>Compose should return a function that is the composition of a list of functions of arbitrary length.
Each function is called on the return value of the function that follows.
You can view compose as moving right to left through its arguments.</p>

<p>Compose Example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">greet</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">hi: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">};</span>
<span class="kd">var</span> <span class="nx">exclaim</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">statement</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">statement</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">!</span><span class="dl">"</span><span class="p">;</span>
<span class="p">};</span>
<span class="kd">var</span> <span class="nx">welcome</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
  <span class="nx">greet</span><span class="p">,</span>
  <span class="nx">exclaim</span>
<span class="p">);</span>
<span class="nx">welcome</span><span class="p">(</span><span class="dl">"</span><span class="s2">phillip</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 'hi: PHILLIP!'</span>
</code></pre></div></div>

<p>Step 2: Implement the function Pipe:</p>

<p>Pipe composes a series of functions and returns the resulting function.
Each function is called on the return value of the preceding function.
You can view pipe as moving left to right through its arguments.</p>

<p>Pipe Example:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">var</span> <span class="nx">add2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">){</span> <span class="k">return</span> <span class="nx">number</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span> <span class="p">}</span>
<span class="kd">var</span> <span class="nx">multiplyBy3</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">){</span> <span class="k">return</span> <span class="nx">number</span> <span class="err">\</span><span class="o">*</span> <span class="mi">3</span><span class="p">;</span> <span class="p">}</span>
<span class="nx">pipe</span><span class="p">(</span><span class="nx">add2</span><span class="p">,</span> <span class="nx">multiplyBy3</span><span class="p">)(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">// 21</span>
<span class="nx">pipe</span><span class="p">(</span><span class="nx">add2</span><span class="p">,</span> <span class="nx">multiplyBy3</span><span class="p">,</span> <span class="nx">multiplyBy3</span><span class="p">)(</span><span class="mi">5</span><span class="p">)</span> <span class="c1">// 63</span>
</code></pre></div></div>

<h3 id="풀이">풀이</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">compose</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">args</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">arguments</span><span class="p">).</span><span class="nx">reverse</span><span class="p">();</span>
  <span class="k">return</span> <span class="nx">value</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">args</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">accu</span><span class="p">,</span> <span class="nx">curr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">curr</span><span class="p">(</span><span class="nx">accu</span><span class="p">),</span> <span class="nx">value</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">pipe</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">args</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">value</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">args</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">accu</span><span class="p">,</span> <span class="nx">curr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">curr</span><span class="p">(</span><span class="nx">accu</span><span class="p">),</span> <span class="nx">value</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">};</span>
</code></pre></div></div>
:ET